"""
Test if applicants are being auto-generated by simulating a longer run
"""

import pygame
import sys
import os
import time

# Add project root to path
sys.path.insert(0, r'C:\Users\dirha\Documents\GameCreator\agrifun')

def main():
    # Initialize pygame
    pygame.init()
    
    from scripts.core.game_manager import GameManager
    
    print("\n" + "="*60)
    print("TESTING FOR AUTO-GENERATED APPLICANTS")
    print("="*60)
    print("\nRunning game for 5 seconds to check for auto-generation...")
    print("="*60)
    
    # Create game instance
    game = GameManager()
    
    clock = pygame.time.Clock()
    start_time = time.time()
    frame_count = 0
    last_check = 0
    
    while time.time() - start_time < 5:  # Run for 5 seconds
        delta_time = clock.tick(60) / 1000.0
        frame_count += 1
        
        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                break
            # Pass events to UI manager
            if hasattr(game, 'ui_manager'):
                game.ui_manager.handle_event(event)
        
        # Update game
        game._handle_events()
        game._update(delta_time)
        game._render()
        
        # Check every second
        current_time = time.time()
        if current_time - last_check > 1:
            last_check = current_time
            elapsed = int(current_time - start_time)
            
            ui = game.ui_manager
            if hasattr(ui, 'applicant_panel'):
                panel_visible = ui.applicant_panel.visible == 1
                has_applicants = len(ui.current_applicants) > 0 if hasattr(ui, 'current_applicants') else False
                
                print(f"\n[{elapsed}s] Status Check:")
                print(f"  - Panel visible: {panel_visible}")
                print(f"  - Has applicants: {has_applicants}")
                print(f"  - Startup complete: {ui._is_startup_complete if hasattr(ui, '_is_startup_complete') else 'N/A'}")
                
                if has_applicants:
                    print(f"  - Applicant count: {len(ui.current_applicants)}")
                    print(f"  - Applicants: {[app.name for app in ui.current_applicants]}")
                
                if panel_visible:
                    print("  >>> WARNING: PANEL IS VISIBLE! <<<")
        
        pygame.display.flip()
    
    # Final check
    print("\n" + "="*60)
    print("FINAL STATE AFTER 5 SECONDS:")
    print("="*60)
    
    ui = game.ui_manager
    if hasattr(ui, 'applicant_panel'):
        print(f"Panel visible: {ui.applicant_panel.visible == 1}")
        print(f"Show flag: {ui.show_applicant_panel}")
        print(f"Applicants: {len(ui.current_applicants) if hasattr(ui, 'current_applicants') else 0}")
        
        if hasattr(ui, 'current_applicants') and ui.current_applicants:
            print("\nAPPLICANTS FOUND:")
            for app in ui.current_applicants:
                print(f"  - {app.name}")
    
    pygame.quit()
    print("\nTest complete.")

if __name__ == "__main__":
    main()
